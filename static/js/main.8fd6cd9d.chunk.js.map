{"version":3,"sources":["components/components/Search/Search.js","components/components/Image/Image.js","components/components/Pagination/Pagination.js","components/components/Result/Result.js","App.js","serviceWorker.js","index.js"],"names":["Search","searchRef","React","createRef","handleGetData","e","preventDefault","readRef","_this","current","value","props","dataSearch","react_default","a","createElement","onSubmit","this","className","ref","type","placeholder","Component","Image","_props$image","image","largeImageURL","likes","previewURL","tags","src","alt","href","target","Pagination","onClick","backPage","nextPage","Result","showImages","images","length","console","log","Fragment","map","components_Image_Image","key","id","components_Pagination_Pagination","App","state","term","page","scroll","document","querySelector","scrollIntoView","setState","askApi","url","concat","fetch","then","respuesta","json","resultado","hits","components_Search_Search","components_Result_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fd6cd9d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Search extends Component{\n\n    searchRef = React.createRef();\n\n    handleGetData = (e) => {\n        e.preventDefault();\n\n        //se toma el valor del input\n        const readRef = this.searchRef.current.value;\n        //se envia al componente ppal\n        this.props.dataSearch(readRef)\n    }\n\n    render (){\n        return(\n            <form onSubmit={this.handleGetData}>\n                <div className=\"row justify-content-center\">\n                    <div className=\"form-group col-md-12\">\n                        <input ref={this.searchRef} type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Search your image\"/>\n                    </div>\n                    <div className=\"col-md-8\">\n                    <input type=\"submit\" className=\"btn btn-danger btn-block \" value=\" Find my image...\"/> \n                    </div>\n                </div>\n            </form>    \n        );\n    }\n}\n\nexport default Search;","import React from 'react'\n\nconst Image = (props) => {\n    const {largeImageURL,likes,previewURL,tags} = props.image\n    return (\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card alto\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\"/>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Likes</p>\n                    <p className=\"card-text\">{tags} Likes</p>\n\n                    \n                    <a href={largeImageURL} target=\"_blank\" className=\"btn btn-secondary btn-block\" >Show image</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Image","import React from 'react'\n\nconst Pagination = (props) =>{\n\n    return(\n        <div className= \"py-3\">\n            <button onClick={props.backPage} className=\"btn btn-danger mr-1\"> ... Back </button>\n            <button onClick={props.nextPage} className=\"btn btn-danger\">  Next ... </button>\n\n        </div>\n    )\n}\n\nexport default Pagination\n","import React, { Component } from 'react'\nimport Image from '../Image/Image';\nimport Pagination from '../Pagination/Pagination';\n\nclass Result extends Component{\n\n    showImages = ()=>{\n        const images = this.props.images\n\n        if (images.length === 0){ return null }\n\n        console.log(images)\n\n        return(\n            <React.Fragment>\n                <div className=\"col-12 p-5 row\">\n                    {images.map(image => (\n                        <Image\n                            key = {image.id}\n                            image ={image}\n                        />\n                    ))}\n                </div>\n                <div className=\"row justify-content-center\">\n                <Pagination\n                    backPage = {this.props.backPage}\n                    nextPage = {this.props.nextPage}\n                />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                {this.showImages()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Result","import React from 'react';\nimport Search from './components/components/Search/Search';\nimport Result from './components/components/Result/Result';\nimport \"./bootstrap.min.css\"\n\n\nclass App extends React.Component {\n  state={\n    term: \"\",\n    images:[],\n    page: ''\n  }\n\n  scroll= () =>{\n    const element = document.querySelector(\".jumbotron\");\n    element.scrollIntoView('smooth', 'start')\n  }\n\n  backPage= ()=>{\n    //leer estado actual\n    let page = this.state.page\n    //restar pagina\n    if(page===1){return null}\n      page -= 1\n    // cambio al estado\n      this.setState({\n        page\n      },()=>{\n        this.askApi()\n        this.scroll()\n      })\n  }\n\n  nextPage= ()=>{\n    //leer estado actual\n      let page = this.state.page\n    //sumar pagina\n      page += 1\n    // cambio al estado\n      this.setState({\n        page\n      },()=>{\n        this.askApi()\n        this.scroll()\n      })\n  }\n\n  \n  askApi=()=>{\n    const term = this.state.term\n    const page= this.state.page\n    const url = `https://pixabay.com/api/?key=12729852-59eef194e2bcf04b886ad0945&q=${term}&page=${page}`\n    \n    fetch(url)\n    .then(respuesta => respuesta.json())\n    .then(resultado => this.setState({images: resultado.hits}))\n  }\n\n  dataSearch= term =>{\n    this.setState({\n      term,\n      page: 1\n    },()=>{\n      this.askApi();\n    })\n  }\n\n render() {\n  return (\n    <>\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n      {/* <img src=\"./images/mira.png\" alt=\"hount\"/> */}\n        <h1 className=\" text-center mb-5\">Images Hunter</h1>\n        <Search dataSearch={this.dataSearch}/>\n      </div>\n        <Result \n          images={this.state.images}\n          backPage = {this.backPage}\n          nextPage = {this.nextPage}\n          />\n          \n    </div>\n    </>\n  );\n }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}